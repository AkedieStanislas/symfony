PHP also provides the underlying code for many e-commerce sites 
including WooCommerce and Magento. These e-commerce platforms offer 
a number of tools for selling products online. This way companies 
can focus on other aspects of their business without having to 
implement complex programming logic from scratch.

Write a function agreeOrDisagree() that takes in two strings, and returns "You agree!" if the two strings are the same and "You disagree!" if the two strings are different.

Checkpoint 2 Passed

Stuck? Get a hint
2.
Test your function! Invoke it once with a value that will result in the if block running and once with a value that won’t.

Checkpoint 3 Passed

Stuck? Get a hint
3.
You’re going to write a function to check if it’s time for a user to renew their subscription.

Write a function checkRenewalMonth() that takes in a user’s renewal month as a string (e.g. "January").

Your function should get the current month using the PHP built-in date() function (see the hint for help with this). It should compare the current month to the renewal month passed in. If the renewal month is not the current month, the function should return the string "Welcome!". Otherwise it should return the string "Time to renew".

Checkpoint 4 Passed

Stuck? Get a hint
4.
Test your function! Invoke it once with a value that will result in the if block running and once with a value that won’t.

<?php
namespace Codecademy;

function agreeOrDisagree($first, $second)
{
    if ($first === $second) {
        return "You agree!";
    } else {
        return "You disagree!";
    }
}

echo agreeOrDisagree("left", "right"); 
echo "\n\n";
echo agreeOrDisagree("ok", "ok"); 
echo "\n\n";


function checkRenewalMonth($renewal_month){
  $current_month = date("F");
  if ($renewal_month !== $current_month) {
    return "Welcome!";
  } else {
    return "Time to renew";
  }
}

/* We get the current month with a function, so that it's always accurate. You can invoke your function with the current month as a string. */ 
$current_month = date("F");
echo checkRenewalMonth($current_month);

echo "\n\n";
echo checkRenewalMonth("July");

<?php
namespace Codecademy;
function whatRelation($number)
{
  if($number == 100){
    echo "identical twins";
    }else if ($number > 34){
      echo "parent and child or full siblings";
    }else if ($number > 13){
      echo "grandparent and grandchild, aunt/uncle and niece/nephew, or half siblings";
    }else if($number > 5){
      echo "first cousins";
    }else if ($number > 2){
      echo "second cousins";
    }else if ($number > 0){
      echo "third cousins";
    }else {
      echo "not genetically related";
    }
}
echo whatRelation(100);
echo whatRelation(75);
echo whatRelation(15);
echo whatRelation(7);
echo whatRelation(4);
echo whatRelation(2);
echo whatRelation(120);

<?php
namespace Codecademy;
function airQuality($color)
{
   switch ($color){
  case "green":
    echo "good";
    break;
  case "yellow":
    echo "moderate";
    break;
  case "orange":
    echo "unhealthy for sensitive groups";
    break;
  case "red":
    echo "unhealthy";
    break;
  case "purple":
    echo "very unhealthy";
    break;
    case "maroon":
    echo "hazardous";
    break;
  default:
    echo "invalid color"; 
}
echo airQuality("green");
echo "\n\n";
airQuality("yellow");
echo "\n\n";
airQuality("maroon");
echo "\n\n";
airQuality("hasjgdlajshgd");
 
}

Woah! We covered a lot in this lesson. Good work. Let’s review what we learned:

Conditionals make it possible for programs to decide how to react to a wide variety of situations.
if statements allow us to run a block of code if a condition is met.
The boolean data type is either the value TRUE or FALSE and is the foundation of programmatic decision making.
We use else to include a block of code to run when the condition is not met.
Comparison operators evaluate a relationship between two operands and return a boolean value.
The less than operator (<)
The less than or equal to operator (<=)
The greater than operator (>)
The greater than or equal to operator (>=)
The Identical operator (===)
The not identical operator (!==)
We can write conditionals with multiple if statements using the elseif construction.
Instead of using a series of if statements when we want to compare a value, expression, or variable against many different possible values and run different code depending on which it matches, we can use a switch statement.
The keyword break tells the computer to break out of the switch statement, without it, it will fall through the rest of the switch executing all the code until it reaches a break or the end of the statement.
A ternary operator (?:) is shorthand conditional operator. It takes three operands (a condition to check, an expression to return if the condition is TRUE, and an expression to return if the condition is FALSE).
Any value or expression inside a condition will be converted to TRUE or FALSE. We consider values that will convert to TRUE to be truthy and values that will convert to FALSE to be falsy.
We can get user input from the terminal with the readline() function.
That really is a lot… Take some time to practice and review! You’re doing great.


Back-end Validation
No matter how complete the front-end validation of a website or application seems, validations must also be completed on the back-end or server-side. Front-end validations are easy to bypass—a malicious user can simply turn off JavaScript on their browser, for example. There’s also the potential for middleman attacks in which data is changed after the request is submitted by a user but before it arrives at the server. As a rule, the back-end should never trust the data it receives.

As the developer, once data is in the back-end, we have complete control over it, luckily. Back-end validation has several advantages:

It enables us to use validation code often on machines with more computing power.
It allows us to write validation code that a user can’t see—if malicious users can’t see exactly how we validate the data, it’s much more difficult for them to find ways around it.
We can validate the information against other data the front-end doesn’t have access to—for example, we can check our database to see if a given username is already in use.
There are two main ways to validate inputs on the server-side. The first takes place while the user is still inputting data into the form on the front-end. We can make asynchronous requests to the server with pieces of their data and send feedback directly to the user before they’ve submitted. This is slower than front-end validation and can be a design challenge from a user-experience perspective.

The second is once the form has been submitted. Back-end form validation is our application’s last defense against problematic data, and it’s essential to verify the validity and safety of data before adding it to a database. This is also an opportunity to “sanitize” the data: in order for our database to be useful, it’s important that all data within it is formatted consistently. This means that while we may want to be flexible about the formatting we require from a user, we likely want to transform inputs into a strict format before entering them in the database.

In this lesson, we’ve explored form validation from many angles. Let’s review what we covered:

Modern websites require a lot of information from their users and they collect a lot of this information through HTML forms.
It’s essential to validate the data submitted through forms to keep websites secure and to make sure they function correctly.
Regular expressions are sequences of characters that define patterns to look for in text. They are an important tool used in validating input.
Modern HTML comes with useful built-in methods for form validation.
Custom and complicated client-side validation can be accomplished with JavaScript.
Asynchronous requests to the server can perform back-end validations before a form has been submitted.
A final back-end validation of all data is required to ensure an application’s security and sanitize all data.

When registering an account for a new social media app or completing an order for a gift online, nearly every piece of information you enter into a web form is validated. Did you enter a properly formatted email including an @ symbol? Did you enter a phone number 10 digits long, with or without -s and parentheses? And then there’s the king of them all — did your new password meet the seemingly growing number of requirements for inclusion (and exclusion) of symbols, digits, and both upper and lower case letters?

While correcting each field in our digital lives for proper format can be a pain, it’s integral to ensuring that our accounts are secure, our packages are successfully delivered, and that we can be contacted by phone and email.

The technology that fuels this verification system on nearly every website and application is the ever reliable, often quirky language of regular expressions, commonly shortened to regex, as we will use here, or regexp (pronunciation is up for debate). A regular expression is a special sequence of characters that describe a pattern of text that should be found, or matched, in a string or document. By matching text, we can identify how often and where certain pieces of text occur, as well as have the opportunity to replace or update these pieces of text if needed.

Regular Expressions have a variety of use cases including:

validating user input in HTML forms
verifying and parsing text in files, code and applications
examining test results
finding keywords in emails and web pages
While there are a variety of implementations of Regular Expressions across platforms, in this lesson you will learn the basics that apply everywhere. By the lesson’s end, you’ll be empowered to use them in your own projects (and become a regex superhero)!


Do you feel those regular expression superpowers coursing through your body? Do you just want to scream ah+ really loud? Awesome! You are now ready to take these skills and use them out in the wild. Before beginning your adventures, let’s review what we’ve learned.

Regular expressions are special sequences of characters that describe a pattern of text that is to be matched
We can use literals to match the exact characters that we desire
Alternation, using the pipe symbol |, allows us to match the text preceding or following the |
Character sets, denoted by a pair of brackets [], let us match one character from a series of characters
Wildcards, represented by the period or dot ., will match any single character (letter, number, symbol or whitespace)
Ranges allow us to specify a range of characters in which we can make a match
Shorthand character classes like \w, \d and \s represent the ranges representing word characters, digit characters, and whitespace characters, respectively
Groupings, denoted with parentheses (), group parts of a regular expression together, and allows us to limit alternation to part of a regex
Fixed quantifiers, represented with curly braces {}, let us indicate the exact quantity or a range of quantity of a character we wish to match
Optional quantifiers, indicated by the question mark ?, allow us to indicate a character in a regex is optional, or can appear either 0 times or 1 time
The Kleene star, denoted with the asterisk *, is a quantifier that matches the preceding character 0 or more times
The Kleene plus, denoted by the plus +, matches the preceding character 1 or more times
The anchor symbols hat ^ and dollar sign $ are used to match text at the start and end of a string, respectively